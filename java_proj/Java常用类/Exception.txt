一、异常分类
严重问题：Error 。这种问题一般都是很严重的，比如说内存溢出。不处理。

问题：Exception

         编译期问题:不是RuntimeException的异常 必须进行处理的，因为你不处理，编译就不能通过。

         运行期问题:RuntimeException  需要修正代码的。

二、异常的处理
1、try...catch...finally 
 try...catch...finally的处理格式：
 try {
     可能出现问题的代码;
 }catch(异常名 变量) {
      针对问题的处理;
 }finally {
      释放资源;
 }
 try里面的代码越少越好
 catch里面必须有内容，哪怕是给出一个简单的提示

2、throws 抛出

有些时候，我们是可以对异常进行处理的，但是又有些时候，我们根本就没有权限去处理某个异常。
为了解决出错问题，Java针对这种情况，就提供了另一种处理方案：抛出。
格式：
throws 异常类名
注意：这个格式必须跟在方法的括号后面。
           尽量不要在main方法上抛出异常。
小结：
编译期异常抛出，将来调用者必须处理。
运行期异常抛出，将来调用可以不用处理。

3、throw:如果出现了异常情况，我们可以把该异常抛出，这个时候的抛出的应该是异常的对象。
 throws和throw的区别(面试题)
 throws
        用在方法声明后面，跟的是异常类名
        可以跟多个异常类名，用逗号隔开
        表示抛出异常，由该方法的调用者来处理
        throws表示出现异常的一种可能性，并不一定会发生这些异常
 throw
        用在方法体内，跟的是异常对象名
        只能抛出一个异常对象名
        表示抛出异常，由方法体内的语句处理
        throw则是抛出了异常，执行throw则一定抛出了某种异常

三、多个异常
1、每一个写一个try...catch
2、写一个try，多个catch
try{
}catch(异常类名 变量名) {
}
catch(异常类名 变量名) {
}
  注意事项：
 1:能明确的尽量明确，不要用大的来处理。
 2:平级关系的异常谁前谁后无所谓，如果出现了子父关系，父必须在后面。
注意：
一旦try里面出了问题，就会在这里把问题给抛出去，然后和catch里面的问题进行匹配，
一旦有匹配的，就执行catch里面的处理，然后结束了try...catch
继续执行后面的语句。

3、try{
}catch(异常名1 | 异常名2 | ...  变量 ) {
}
  注意：这个方法虽然简洁，但是也不够好。
 1、处理方式是一致的。(实际开发中，好多时候可能就是针对同类型的问题，给出同一个处理)
 2、多个异常间必须是平级关系。

四、finally
finally:被finally控制的语句体一定会执行
注意：如果在执行到finally之前jvm退出了，就不能执行了。用于释放资源。

finally中的return 会覆盖 try 或者catch中的返回值。

finally中的return会抑制（消灭）前面try或者catch块中的异常

finally中的异常会覆盖（消灭）前面try或者catch中的异常
面试题：
1、final,finally和finalize的区别
 final：最终的意思，可以修饰类，成员变量，成员方法
        修饰类，类不能被继承
        修饰变量，变量是常量
        修饰方法，方法不能被重写
 finally：是异常处理的一部分，用于释放资源。
         一般来说，代码肯定会执行，特殊情况：在执行到finally之前jvm退出了
 finalize：是Object类的一个方法，用于垃圾回收
 2、如果catch里面有return语句，请问finally里面的代码还会执行吗?
    如果会，请问是在return前，还是return后。
   会。前。准确的说，应该是在中间。

五、自定义异常
在实际的开发中，我们可能需要自己定义异常。而我们自己随意的写一个类，是不能作为异常类来看的，要想你的类是一个异常类，就必须继承自Exception或者RuntimeException

按照国际惯例，自定义的异常应该总是包含如下的构造函数： 

一个无参构造函数

一个带有String参数的构造函数，并传递给父类的构造函数。

一个带有String参数和Throwable参数，并都传递给父类构造函数

一个带有Throwable 参数的构造函数，并传递给父类的构造函数。

如下所示：

public class MyException extends Exception {
	
	private static final long serialVersionUID = 1251882582474498283L;
 
	public MyException() {
		super();
	}
 
	public MyException(String message) {
		super(message);
	}
    
    public MyException(String message,Throwable cause) {
        super(message,cause)
    }
  
    public MyException(Throwable cause) {
        super(cause)
    }
六、异常注意事项
1、子类重写父类方法时，子类的方法必须抛出相同的异常或父类异常的子类。
2、如果父类抛出了多个异常,子类重写父类时,只能抛出相同的异常或者是他的子类,子类不能抛出父类没有的异常
3、如果被重写的方法没有异常抛出,那么子类的方法绝对不可以抛出异常,如果子类方法内有异常发生,那么子类只能try,不能throws
